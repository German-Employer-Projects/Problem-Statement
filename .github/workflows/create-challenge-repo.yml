name: Create Challenge Repository

on:
  issues:
    types: [opened]

jobs:
  create-challenge-repo:
    if: contains(github.event.issue.labels.*.name, 'employer-submission') || startsWith(github.event.issue.title, '[New Project]')
    runs-on: ubuntu-latest
    
    steps:
    - name: Debug issue information
      run: |
        echo "Issue title: ${{ github.event.issue.title }}"
        echo "Issue labels: ${{ toJson(github.event.issue.labels) }}"
        echo "Issue body: ${{ github.event.issue.body }}"
    
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Parse issue data
      id: parse_issue
      run: |
        # Save issue body to file for easier parsing
        echo '${{ github.event.issue.body }}' > issue_body.txt
        
        # Function to extract field value
        extract_field() {
          local field_name="$1"
          # Look for the field and get everything until the next ### or end of file
          awk -v field="$field_name" '
            BEGIN { found=0; content="" }
            $0 ~ "### " field { found=1; next }
            found && /^### / { found=0 }
            found && !/^$/ { 
              if (content != "") content = content "\n"
              content = content $0 
            }
            END { print content }
          ' issue_body.txt | sed 's/^[[:space:]]*//;s/[[:space:]]*$//'
        }
        
        # Extract all fields
        company_name=$(extract_field "Company Name")
        project_title=$(extract_field "Project Title")
        problem_statement=$(extract_field "Problem Statement")
        expected_outcome=$(extract_field "Expected Outcome")
        tech_stack=$(extract_field "Preferred Technologies")
        estimated_time=$(extract_field "Estimated Completion Time")
        evaluation_criteria=$(extract_field "Evaluation Criteria")
        
        # If extraction fails, try alternative method
        if [ -z "$project_title" ]; then
          # Fallback to simple grep method
          project_title=$(grep -A 1 "Project Title" issue_body.txt | tail -1 | sed 's/^[[:space:]]*//')
        fi
        
        if [ -z "$company_name" ]; then
          company_name=$(grep -A 1 "Company Name" issue_body.txt | tail -1 | sed 's/^[[:space:]]*//')
        fi
        
        # Create repository name (sanitize project title)
        repo_name=$(echo "$project_title" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
        
        # Debug output
        echo "=== PARSED DATA ==="
        echo "Company: [$company_name]"
        echo "Project: [$project_title]"
        echo "Repo name: [$repo_name]"
        echo "Problem statement length: ${#problem_statement}"
        
        # Set outputs with proper escaping
        {
          echo "company_name<<EOF"
          echo "$company_name"
          echo "EOF"
          echo "project_title<<EOF"
          echo "$project_title"
          echo "EOF"
          echo "repo_name<<EOF" 
          echo "$repo_name"
          echo "EOF"
          echo "problem_statement<<EOF"
          echo "$problem_statement"
          echo "EOF"
          echo "expected_outcome<<EOF"
          echo "$expected_outcome"
          echo "EOF"
          echo "tech_stack<<EOF"
          echo "$tech_stack"
          echo "EOF"
          echo "estimated_time<<EOF"
          echo "$estimated_time"
          echo "EOF"
          echo "evaluation_criteria<<EOF"
          echo "$evaluation_criteria"
          echo "EOF"
        } >> $GITHUB_OUTPUT
    
    - name: Create new repository
      id: create_repo
      run: |
        repo_name="${{ steps.parse_issue.outputs.repo_name }}"
        project_title="${{ steps.parse_issue.outputs.project_title }}"
        company_name="${{ steps.parse_issue.outputs.company_name }}"
        
        echo "Creating repository: $repo_name"
        
        # Create repository in organization using GitHub API
        response=$(curl -s -X POST \
          -H "Authorization: token ${{ secrets.REPO_CREATION_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/orgs/German-Employer-Project/repos \
          -d "{
            \"name\": \"$repo_name\",
            \"description\": \"Challenge from $company_name: $project_title\",
            \"private\": false,
            \"auto_init\": true
          }")
        
        echo "API Response: $response"
        
        # Check if repository was created successfully
        if echo "$response" | grep -q '"id"'; then
          # Extract repository URL
          repo_url=$(echo "$response" | jq -r '.html_url // empty')
          clone_url=$(echo "$response" | jq -r '.clone_url // empty')
          
          # If jq parsing fails, construct URLs manually
          if [ -z "$repo_url" ] || [ "$repo_url" = "null" ]; then
            repo_url="https://github.com/German-Employer-Project/$repo_name"
            clone_url="https://github.com/German-Employer-Project/$repo_name.git"
          fi
          
          echo "Repository created successfully!"
          echo "Repository URL: $repo_url"
          echo "Clone URL: $clone_url"
          
          # Set outputs
          echo "repo_url=$repo_url" >> $GITHUB_OUTPUT
          echo "clone_url=$clone_url" >> $GITHUB_OUTPUT
          echo "success=true" >> $GITHUB_OUTPUT
        else
          echo "Failed to create repository"
          echo "Error response: $response"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
    
    - name: Create README.md content
      id: create_readme
      run: |
        cat > README.md << 'EOF'
        # ${{ steps.parse_issue.outputs.project_title }}
        
        **Company:** ${{ steps.parse_issue.outputs.company_name }}
        
        ## Problem Statement
        ${{ steps.parse_issue.outputs.problem_statement }}
        
        ## Expected Outcome
        ${{ steps.parse_issue.outputs.expected_outcome }}
        
        ## Preferred Technologies
        ${{ steps.parse_issue.outputs.tech_stack }}
        
        ## Challenge Details
        - **Estimated Completion Time:** ${{ steps.parse_issue.outputs.estimated_time }}
        - **Company:** ${{ steps.parse_issue.outputs.company_name }}
        - **Original Issue:** [${{ github.event.issue.title }}](${{ github.event.issue.html_url }})
        
        ## Evaluation Criteria
        ${{ steps.parse_issue.outputs.evaluation_criteria }}
        
        ---
        
        ## üöÄ How to Submit Your Solution
        
        ### Step 1: Fork this Repository
        1. Click the "Fork" button at the top right of this repository
        2. This creates a copy of the challenge in your GitHub account
        
        ### Step 2: Clone Your Fork
        ```bash
        git clone https://github.com/YOUR_USERNAME/${{ steps.parse_issue.outputs.repo_name }}.git
        cd ${{ steps.parse_issue.outputs.repo_name }}
        ```
        
        ### Step 3: Implement Your Solution
        - Create your solution files in the repository
        - Follow the requirements and use the preferred technologies mentioned above
        - Include clear documentation and comments in your code
        - Add a brief explanation of your approach below (replace this section)
        
        ### Your Solution Explanation
        <!-- Replace this section with your approach and any notes for reviewers -->
        **Your Name:** [Your Name]
        **Contact:** [Your Email/LinkedIn]
        **Approach:** [Briefly explain your solution approach]
        **Key Features:** [List main features of your solution]
        **Assumptions:** [Any assumptions you made]
        **Future Improvements:** [What you would add given more time]
        
        ### Step 4: Commit and Push
        ```bash
        git add .
        git commit -m "Add solution for ${{ steps.parse_issue.outputs.project_title }}"
        git push origin main
        ```
        
        ### Step 5: Create Pull Request
        1. Go to your forked repository on GitHub
        2. Click "Contribute" ‚Üí "Open pull request"
        3. Title: "Solution by [Your Name]"
        4. In the description, briefly explain your solution and any special instructions
        5. Submit the pull request
        
        ## üìù Submission Checklist
        Before submitting, make sure you have:
        - [ ] Implemented the core functionality described in the problem statement
        - [ ] Used the preferred technologies (or explained why you chose alternatives)
        - [ ] Added clear documentation/comments in your code
        - [ ] Included a README section explaining your approach
        - [ ] Tested your solution thoroughly
        - [ ] Created a clear Pull Request with good description
        
        ## ‚ùì Questions?
        If you have questions about this challenge:
        1. Check existing Issues in this repository first
        2. If your question hasn't been asked, create a new Issue
        3. Tag it with "question" label
        4. Be specific about what you need clarification on
        
        **Good luck! üéØ**
        EOF
    
    - name: Add README to new repository
      if: steps.create_repo.outputs.success == 'true'
      run: |
        repo_name="${{ steps.parse_issue.outputs.repo_name }}"
        
        echo "Waiting for repository to be fully initialized..."
        sleep 10
        
        # Clone the newly created repository
        echo "Cloning repository..."
        git clone https://${{ secrets.REPO_CREATION_TOKEN }}@github.com/German-Employer-Project/$repo_name.git temp_repo
        
        if [ ! -d "temp_repo" ]; then
          echo "Failed to clone repository. Trying alternative approach..."
          
          # Alternative: Create repository content via API
          readme_content=$(cat README.md | base64 -w 0)
          
          curl -X PUT \
            -H "Authorization: token ${{ secrets.REPO_CREATION_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/German-Employer-Project/$repo_name/contents/README.md \
            -d "{
              \"message\": \"Add challenge description and submission instructions\",
              \"content\": \"$readme_content\"
            }"
          
          echo "README added via API"
        else
          cd temp_repo
          
          # Configure git
          git config user.name "Challenge Bot"
          git config user.email "noreply@github.com"
          
          # Copy and update README
          cp ../README.md .
          
          # Commit and push
          git add README.md
          git commit -m "Add challenge description and submission instructions"
          git push origin main
          
          cd ..
          rm -rf temp_repo
          
          echo "README added via git"
        fi
    
    - name: Update original issue
      if: steps.create_repo.outputs.success == 'true'
      run: |
        repo_url="${{ steps.create_repo.outputs.repo_url }}"
        company_name="${{ steps.parse_issue.outputs.company_name }}"
        
        # Add comment to original issue with repository link
        curl -X POST \
          -H "Authorization: token ${{ secrets.REPO_CREATION_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
          -d "{
            \"body\": \"‚úÖ **Challenge repository created successfully for $company_name!**\\n\\nüîó **Repository URL:** $repo_url\\n\\n**Next Steps:**\\n1. Share this repository URL with candidates\\n2. Candidates should fork the repo and submit solutions via Pull Requests\\n3. You can review submissions in the Pull Requests tab of the new repository\\n4. Add yourself or your team as collaborators to the repository for review access\\n\\n**Repository includes:**\\n- Complete problem statement and requirements\\n- Step-by-step submission instructions for candidates\\n- Evaluation criteria\\n- Submission checklist\\n\\nCandidates will submit by forking the repository and creating Pull Requests with their solutions.\"
          }"
        
        # Add "repository-created" label and remove "employer-submission" 
        curl -X POST \
          -H "Authorization: token ${{ secrets.REPO_CREATION_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/labels \
          -d '["repository-created"]'
